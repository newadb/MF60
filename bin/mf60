#!/usr/bin/env ruby
require 'rubygems'
require 'mf60'
require 'httparty'
require 'thor'

class MF60Util < Thor
  # Usage: #{app} <command>
  # Commands:
  #   status      current device info
  #   stats       show connection statistics
  #   connect     connect WAN (3G/2G)
  #   disconnect  disconnect WAN
  #   reset       reset (disconnect, then connect)

  USER       ='admin'
  PASSWORD   = ENV['MF60PW'] || raise("Error: No password set. Environment var MF60PW should contain the device password.")

  desc "reset", "Reset the WAN connection"
  def reset
    mf60 = MF60::Client.new(USER, PASSWORD)
    mf60.reset
  end

  desc "connect", "Connect to the cellular network"
  def connect
    mf60 = MF60::Client.new(USER, PASSWORD)
    mf60.connect
  end

  desc "disconnect", "Disconnect from the cellular network"
  def disconnect
    mf60 = MF60::Client.new(USER, PASSWORD)
    mf60.disconnect
  end

  desc "status", "Display connection status and signal strength"
  def status
    mf60 = MF60::Client.new(USER, PASSWORD)
    st = mf60.status
    puts 'MF60 Current Status'
    puts '-------------------'
    puts "Provider     : #{st[:provider]}"
    puts "Network Type : #{st[:network_type_var]}"
    puts "Device State : #{st[:cardstate]}"
    puts "Network Mode : #{st[:current_network_mode]}" if st[:current_network_mode] =~ /.+/
    puts "rscp/ecio    : #{st[:rscp]}/#{st[:ecio]}"
  end

  desc "stats", "Get statistics and usage info"
  def stats
    mf60 = MF60::Client.new(USER, PASSWORD)
    info = mf60.stats
    puts 'MF60 Current Statistics'
    puts '-----------------------'
    puts "Connect Time : #{info[:connect_time]}"
    puts "Transmitted  : #{MF60::Helpers.bytes_formatted(info[:current_trans])}"
    puts "Received     : #{MF60::Helpers.bytes_formatted(info[:current_recv])}"
    puts "Total Recv   : #{MF60::Helpers.bytes_formatted(info[:total_recv])}"
  end
end

MF60Util.start

#vim: set ft=ruby
